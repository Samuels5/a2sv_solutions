class Solution(object):
    def shortestSubarray(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: int
        """
        n = len(nums)
        prefix_sum = [0]
        shortest_length = float('inf')
        deque = collections.deque()
        for i in range(n):
            prefix_sum.append(prefix_sum[-1] + nums[i])
        for j in range(n+1):
            while deque and prefix_sum[j] - prefix_sum[deque[0]] >= k:
                shortest_length = min(shortest_length, j - deque[0])
                deque.popleft()
            while deque and prefix_sum[j] <= prefix_sum[deque[-1]]:
                deque.pop()
            deque.append(j)
        
        return shortest_length if shortest_length != float('inf') else -1
